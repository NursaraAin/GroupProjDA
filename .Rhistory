if(hmph[k,]$X==opt){
if(hmph[k,]$Time.period==2017){
a=a+hmph[k,]$Children.with.functional.difficulties.Point.estimate
e=e+1
}
else if(hmph[k,]$Time.period==2018){
b=b+hmph[k,]$Children.with.functional.difficulties.Point.estimate
f=f+1
}
else if(hmph[k,]$Time.period==2019){
c=c+hmph[k,]$Children.with.functional.difficulties.Point.estimate
g=g+1
}
else{
d=d+hmph[k,]$Children.with.functional.difficulties.Point.estimate
h=h+1
}
}
}
a=a/e
b=b/f
c=c/g
d=d/h
data.frame(
year=c(2017:2020),
disabled=c(a,b,c,d)
)
}
yearPred_R=insertYear(1)
yearPred_U=insertYear(2)
future=function(z,y,opt){
i=0
j=0
#set how many year to predict
year=y
for(j in 1:year){
pred=0
for(i in 1:nrow(filter(dt,X == opt))) {
#predict for each row
re=dt[i,]$reg
dv=dt[i,]$develop
indi=dt[i,]$level
house=dt[i,]$X
#set year to predict
t=z[nrow(z),]$year+1
#set total estimate
d0=data.frame(reg=re,develop=dv,level=indi,X=house,Time.period=t,interval = "confidence")
tpe=as.double(predict(model_tpe,d0))
#set cthout
d1=data.frame(reg=re,develop=dv,level=indi,X=house,Time.period=t,interval = "confidence")
cthout=as.double(predict(model_cthout,d1))
newdata=data.frame(reg=re,
develop=dv,
level=indi,
X=house,
Total.Point.estimate=tpe,
Children.without.functional.difficulties.Point.estimate=cthout,
Time.period = t, interval = "confidence")
pred=pred+as.double(predict(model,newdata))
}
meanPred=pred/nrow(dt)
#create data frame
newPred=data.frame(
year=z[nrow(z),]$year+1,
anarDisabled=meanPred
)
#insert to yearPred
z[nrow(z) + 1,]=newPred
}
z
}
yearPred_R<-data.frame(future(yearPred_R,5,1))
yearPred_U<-data.frame(future(yearPred_U,5,1))
plot(yearPred_U$year, yearPred_U$disabled, col="red",type = "b", lty = 2, asp = 0.1, lwd=2,
main = "Percentage of children with disabilities attending to school group by housing area", xlab="Year",ylab="Percentage of children with disabilities")
lines(yearPred_U[1:4,]$year, yearPred_U[1:4,]$disabled, col="deeppink",type = "b", lty = 1,lwd=2)
lines(yearPred_R$year, yearPred_R$disabled, col="blue",type = "b", lty = 2,lwd=2)
lines(yearPred_R[1:4,]$year, yearPred_R[1:4,]$disabled, col="purple",type = "b", lty = 1,lwd=2)
legend("topright", legend=c("Predicted (Rural)", "Actual (Rural)","Predicted (Urban)", "Actual (Urban)"),
col=c("red", "deeppink","blue","purple"), lty = 2:1, cex=0.8,lwd=2)
yearPred_U<-data.frame(future(yearPred_U,5,2))
plot(yearPred_U$year, yearPred_U$disabled, col="red",type = "b", lty = 2, asp = 0.1, lwd=2,
main = "Percentage of children with disabilities attending to school group by housing area", xlab="Year",ylab="Percentage of children with disabilities")
lines(yearPred_U[1:4,]$year, yearPred_U[1:4,]$disabled, col="deeppink",type = "b", lty = 1,lwd=2)
lines(yearPred_R$year, yearPred_R$disabled, col="blue",type = "b", lty = 2,lwd=2)
lines(yearPred_R[1:4,]$year, yearPred_R[1:4,]$disabled, col="purple",type = "b", lty = 1,lwd=2)
legend("topright", legend=c("Predicted (Rural)", "Actual (Rural)","Predicted (Urban)", "Actual (Urban)"),
col=c("red", "deeppink","blue","purple"), lty = 2:1, cex=0.8,lwd=2)
hmph=subset(dt,select = c(Time.period,Children.with.functional.difficulties.Point.estimate))
a=colMeans(hmph[hmph$Time.period=='2017',])
b=colMeans(hmph[hmph$Time.period=='2018',])
c=colMeans(hmph[hmph$Time.period=='2019',])
d=colMeans(hmph[hmph$Time.period=='2020',])
yearPred=data.frame(
year=c(2017:2020),
anarDisabled=c(as.double(a[2]),as.double(b[2]),as.double(c[2]),as.double(d[2]))
)
year=5
i=j=0
for(j in 1:year){
pred=0
for(i in 1:nrow(dt)) {
#predict for each row
re=dt[i,]$reg
dv=dt[i,]$develop
indi=dt[i,]$level
house=1
#set year to predict
t=yearPred[nrow(yearPred),]$year+1
#set total estimate
d0=data.frame(reg=re,develop=dv,level=indi,X=house,Time.period=t,interval = "confidence")
tpe=as.double(predict(model_tpe,d0))
#set cthout
d1=data.frame(reg=re,develop=dv,level=indi,X=house,Time.period=t,interval = "confidence")
cthout=as.double(predict(model_cthout,d1))
newdata=data.frame(reg=re,
develop=dv,
level=indi,
X=house,
Total.Point.estimate=tpe,
Children.without.functional.difficulties.Point.estimate=cthout,
Time.period = t, interval = "confidence")
pred=pred+as.double(predict(model,newdata))
}
meanPred=pred/nrow(dt)
#create data frame
newPred=data.frame(
year=yearPred[nrow(yearPred),]$year+1,
anarDisabled=meanPred
)
#insert to yearPred
yearPred[nrow(yearPred) + 1,]=newPred
}
plot(yearPred$year, yearPred$anarDisabled, col="red",type = "b", lty = 2, frame=FALSE, lwd=2,
main = "Percentage of children with disabilities attending to school in rural", xlab="Year",ylab="Percentage of children with disabilities")
lines(yearPred[1:4,]$year, yearPred[1:4,]$anarDisabled, col="blue",type = "b", lty = 1, lwd=2)
legend("bottomright", legend=c("Predicted", "Actual"),
col=c("red", "blue"), lty = 2:1, cex=0.8)
hmph=subset(dt,select = c(Time.period,Children.with.functional.difficulties.Point.estimate))
a=colMeans(hmph[hmph$Time.period=='2017',])
b=colMeans(hmph[hmph$Time.period=='2018',])
c=colMeans(hmph[hmph$Time.period=='2019',])
d=colMeans(hmph[hmph$Time.period=='2020',])
yearPred=data.frame(
year=c(2017:2020),
anarDisabled=c(as.double(a[2]),as.double(b[2]),as.double(c[2]),as.double(d[2]))
)
year=5
i=j=0
for(j in 1:year){
pred=0
for(i in 1:nrow(dt)) {
#predict for each row
re=dt[i,]$reg
dv=dt[i,]$develop
indi=dt[i,]$level
house=2
#set year to predict
t=yearPred[nrow(yearPred),]$year+1
#set total estimate
d0=data.frame(reg=re,develop=dv,level=indi,X=house,Time.period=t,interval = "confidence")
tpe=as.double(predict(model_tpe,d0))
#set cthout
d1=data.frame(reg=re,develop=dv,level=indi,X=house,Time.period=t,interval = "confidence")
cthout=as.double(predict(model_cthout,d1))
newdata=data.frame(reg=re,
develop=dv,
level=indi,
X=house,
Total.Point.estimate=tpe,
Children.without.functional.difficulties.Point.estimate=cthout,
Time.period = t, interval = "confidence")
pred=pred+as.double(predict(model,newdata))
}
meanPred=pred/nrow(dt)
#create data frame
newPred=data.frame(
year=yearPred[nrow(yearPred),]$year+1,
anarDisabled=meanPred
)
#insert to yearPred
yearPred[nrow(yearPred) + 1,]=newPred
}
line(yearPred$year, yearPred$anarDisabled, col="deeppink",type = "b", lty = 2, frame=FALSE, lwd=2)
lines(yearPred$year, yearPred$anarDisabled, col="deepink",type = "b", lty = 2, frame=FALSE, lwd=2)
lines(yearPred$year, yearPred$anarDisabled, col="deeppink",type = "b", lty = 2, frame=FALSE, lwd=2)
lines(yearPred[1:4,]$year, yearPred[1:4,]$anarDisabled, col="purple",type = "b", lty = 1, lwd=2)
corr(predictions, validation$Children.with.functional.difficulties.Point.estimate)
library(psych)
library(caret)
library(dplyr)
library(car)
library(Metrics)
anar=read.csv("ANAR/HousingANAR.csv")
dt=subset(anar,select = c(reg,develop,level,X,
Total.Point.estimate,Children.without.functional.difficulties.Point.estimate,
Children.with.functional.difficulties.Point.estimate,Time.period))
set.seed(4)
split1<- sample(c(rep(0, 0.7 * nrow(dt)), rep(1, 0.3 * nrow(dt))))
table(split1)
train=dt[split1==0,]
test=dt[split1==1,]
# algorithm building
trainControl <- trainControl(method = "cv", number = 10)
metric <- "RMSE"
fit.lm <- train(Children.with.functional.difficulties.Point.estimate~., data = train, method = "lm", metric = metric, trControl = trainControl)
print(fit.lm)
fit.knn <- train(Children.with.functional.difficulties.Point.estimate~., data = train, method = "knn", metric = metric, trControl = trainControl)
print(fit.knn)
fit.glmnet <- train(Children.with.functional.difficulties.Point.estimate~., data = train, method = "glmnet", metric = metric, trControl = trainControl)
print(fit.glmnet)
#compare
results <- resamples(list(LR = fit.lm, KNN = fit.knn, GLMNET = fit.glmnet))
summary(results)
dotplot(results)
# splitting dataset
validationIndex <- createDataPartition(dt$Children.with.functional.difficulties.Point.estimate, p=0.80, list = FALSE)
# splitting dataset
validationIndex <- createDataPartition(dt$Children.with.functional.difficulties.Point.estimate, p=0.80, list = FALSE)
validation <- dt[-validationIndex,]
dt <- dt[validationIndex,]
#predictions
predictions <- as.numeric(predict(fit.lm, validation))
corr(predictions, validation$Children.with.functional.difficulties.Point.estimate)
cor(predictions, validation$Children.with.functional.difficulties.Point.estimate)
cor(predictions, validation$Children.with.functional.difficulties.Point.estimate)
#predictions
predictions <- as.numeric(predict(fit.lm, validation))
cor(predictions, validation$Children.with.functional.difficulties.Point.estimate)
#[1] 0.9979316
predictions <- as.numeric(predict(fit.knn, validation))
cor(predictions, validation$Children.with.functional.difficulties.Point.estimate)
#[1] 0.9907939
predictions <- as.numeric(predict(fit.glmnet, validation))
corr(predictions, validation$Children.with.functional.difficulties.Point.estimate)
cor(predictions, validation$Children.with.functional.difficulties.Point.estimate)
y <- anar$Children.without.functional.difficulties.Point.estimate
x <- data.matrix(anar[, c('reg', 'develop', 'level','X',
'Total.Point.estimate','Children.without.functional.difficulties.Point.estimate',
'Time.period')])
#perform k-fold cross-validation to find optimal lambda value
cv_model <- cv.glmnet(x, y, alpha = 1)
#find optimal lambda value that minimizes test MSE
best_lambda <- cv_model$lambda.min
best_lambda
plot(cv_model)
#find coefficients of best model
best_model <- glmnet(x, y, alpha = 1, lambda = best_lambda)
#lasso regression
library(glmnet)
anar=read.csv("ANAR/HousingANAR.csv")
dt=subset(anar,select = c(reg,develop,level,X,
Total.Point.estimate,Children.without.functional.difficulties.Point.estimate,
Children.with.functional.difficulties.Point.estimate,Time.period))
str(dt)
y <- anar$Children.without.functional.difficulties.Point.estimate
x <- data.matrix(anar[, c('reg', 'develop', 'level','X',
'Total.Point.estimate','Children.without.functional.difficulties.Point.estimate',
'Time.period')])
#perform k-fold cross-validation to find optimal lambda value
cv_model <- cv.glmnet(x, y, alpha = 1)
#find optimal lambda value that minimizes test MSE
best_lambda <- cv_model$lambda.min
best_lambda
plot(cv_model)
#find coefficients of best model
best_model <- glmnet(x, y, alpha = 1, lambda = best_lambda)
coef(best_model)
#use fitted best model to make predictions
y_predicted <- predict(best_model, s = best_lambda, newx = x)
#find SST and SSE
sst <- sum((y - mean(y))^2)
sse <- sum((y_predicted - y)^2)
#find R-Squared
rsq <- 1 - sse/sst
rsq
#0.4557332
hey=as.numeric(y_predicted)
preds <- data.frame(cbind(actuals=dt$Children.with.functional.difficulties.Point.estimate, predicteds=hey))
mse = mean((preds$actuals - preds$predicteds)^2)
mae = MAE(preds$actuals, preds$predicteds)
rmse = RMSE(preds$actuals, preds$predicteds)
cat("MSE: ", mse, "MAE: ", mae, " RMSE: ", rmse)
x = 1:length(preds$actuals)
plot(x, preds$actuals, col = "red", type = "l", lwd=2,
main = "anar lg data prediction")
lines(x, preds$predicteds, col = "blue", lwd=2)
legend("topright",  legend = c("original", "predicted"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
plot(x, preds$actuals, col = "red", type = "l", lwd=2,
main = "anar lasso data prediction")
lines(x, preds$predicteds, col = "blue", lwd=2)
legend("topright",  legend = c("original", "predicted"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
#------------
#COMPARISON
par(mfrow=c(3,1))
x = 1:length(actuals_preds$actuals)
library(psych)
library(caret)
library(dplyr)
library(car)
library(Metrics)
anar=read.csv("ANAR/HousingANAR.csv")
dt=subset(anar,select = c(reg,develop,level,X,
Total.Point.estimate,Children.without.functional.difficulties.Point.estimate,
Children.with.functional.difficulties.Point.estimate,Time.period))
corPlot(cor(dt))
#LINEAR REGRESSION
set.seed(4)
split1<- sample(c(rep(0, 0.7 * nrow(dt)), rep(1, 0.3 * nrow(dt))))
table(split1)
train.lr=dt[split1==0,]
test.lr=dt[split1==1,]
model.lr=lm(Children.with.functional.difficulties.Point.estimate~.,data = train.lr)
dtPred=predict(model.lr,test.lr)
actuals_preds <- data.frame(cbind(actuals=test.lr$Children.with.functional.difficulties.Point.estimate, predicteds=dtPred))
mse.lr = mean((actuals_preds$actuals - actuals_preds$predicteds)^2)
mae.lr = MAE(actuals_preds$actuals, actuals_preds$predicteds)
rmse.lr = RMSE(actuals_preds$actuals, actuals_preds$predicteds)
cat("MSE: ", mse.lr, "MAE: ", mae.lr, " RMSE: ", rmse.lr)
#MSE:  6.044498 MAE:  1.898926  RMSE:  2.458556
cor(actuals_preds)
#              actuals predicteds
# actuals    1.0000000  0.9975991
# predicteds 0.9975991  1.0000000
summary(model.lr)
#----------
#KNN
indexes = createDataPartition(dt$Children.with.functional.difficulties.Point.estimate,
p = .85, list = F)
set.seed(2)
train.knn = dt[indexes, ]
test.knn = dt[-indexes, ]
train_x.knn = train.knn[, -6]
train_x.knn = scale(train_x.knn)[,]
train_y.knn = train.knn[,6]
test_x.knn = test.knn[, -6]
test_x.knn = scale(test.knn[,-6])[,]
test_y.knn = test.knn[,6]
model.knn = knnreg(train_x.knn, train_y.knn)
str(model.knn)
pred_y.knn = predict(model.knn, data.frame(test_x.knn))
print(data.frame(test_y.knn, pred_y.knn))
mse.knn = mean((test_y.knn - pred_y.knn)^2)
mae.knn = caret::MAE(test_y.knn, pred_y.knn)
rmse.knn = caret::RMSE(test_y.knn, pred_y.knn)
cat("MSE: ", mse.knn, "MAE: ", mae.knn, " RMSE: ", rmse.knn)
#:  43.53883 MAE:  4.03375  RMSE:  6.598396
#---------
#LASSO REGRESSION
library(glmnet)
dt.lasso=subset(anar,select = c(reg,develop,level,X,
Total.Point.estimate,Children.without.functional.difficulties.Point.estimate,
Children.with.functional.difficulties.Point.estimate,Time.period))
str(dt.lasso)
y.lasso <- anar$Children.without.functional.difficulties.Point.estimate
x.lasso <- data.matrix(anar[, c('reg', 'develop', 'level','X',
'Total.Point.estimate','Children.without.functional.difficulties.Point.estimate',
'Time.period')])
#perform k-fold cross-validation to find optimal lambda value
cv_model <- cv.glmnet(x.lasso, y.lasso, alpha = 1)
#find optimal lambda value that minimizes test MSE
best_lambda <- cv_model$lambda.min
best_lambda
plot(cv_model)
#find coefficients of best model
best_model <- glmnet(x.lasso, y.lasso, alpha = 1, lambda = best_lambda)
coef(best_model)
#use fitted best model to make predictions
y.lasso_predicted <- predict(best_model, s = best_lambda, newx = x.lasso)
#find SST and SSE
sst <- sum((y.lasso - mean(y.lasso))^2)
sse <- sum((y.lasso_predicted - y.lasso)^2)
#find R-Squared
rsq <- 1 - sse/sst
rsq
# 0.9990716
hey=as.numeric(y.lasso_predicted)
preds <- data.frame(cbind(actuals=dt$Children.with.functional.difficulties.Point.estimate, predicteds=hey))
mse.lasso = mean((preds$actuals - preds$predicteds)^2)
mae.lasso = MAE(preds$actuals, preds$predicteds)
rmse.lasso = RMSE(preds$actuals, preds$predicteds)
cat("MSE: ", mse.lasso, "MAE: ", mae.lasso, " RMSE: ", rmse.lasso)
#MSE:  49.02464 MAE:  5.32957  RMSE:  7.00176
#------------
#COMPARISON
par(mfrow=c(3,1))
x = 1:length(actuals_preds$actuals)
x.lasso = 1:length(preds$actuals)
x.knn = 1:length(test_y.knn)
plot(x, actuals_preds$actuals, col = "red", type = "l", lwd=2,
main = "anar lg data prediction")
lines(x, actuals_preds$predicteds, col = "blue", lwd=2)
legend("topright",  legend = c("original", "predicted"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
grid()
plot(x, test_y, col = "red", type = "l", lwd=2,
main = "anar knn data prediction")
lines(x, pred_y, col = "blue", lwd=2)
legend("topright",  legend = c("original", "predicted"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
grid()
plot(x, preds$actuals, col = "red", type = "l", lwd=2,
main = "anar lasso data prediction")
lines(x, preds$predicteds, col = "blue", lwd=2)
legend("topright",  legend = c("original", "predicted"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
grid()
#------------
#COMPARISON
par(mfrow=c(3,1))
x = 1:length(actuals_preds$actuals)
x.lasso = 1:length(preds$actuals)
x.knn = 1:length(test_y.knn)
plot(x, actuals_preds$actuals, col = "red", type = "l", lwd=2,
main = "anar lg data prediction")
lines(x, actuals_preds$predicteds, col = "blue", lwd=2)
legend("topright",  legend = c("original", "predicted"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
grid()
plot(x.knn, test_y.knn, col = "red", type = "l", lwd=2,
main = "anar knn data prediction")
lines(x.knn, pred_y.knn, col = "blue", lwd=2)
legend("topright",  legend = c("original", "predicted"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
grid()
plot(x.lasso, preds$actuals, col = "red", type = "l", lwd=2,
main = "anar lasso data prediction")
lines(x.lasso, preds$predicteds, col = "blue", lwd=2)
legend("topright",  legend = c("original", "predicted"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
grid()
plot(x, actuals_preds$actuals, col = "red", type = "l", lwd=2,
main = "anar lg data prediction")
lines(x, actuals_preds$predicteds, col = "blue", lwd=2)
grid()
legend("topright",  legend = c("original", "predicted"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
plot(x.knn, test_y.knn, col = "red", type = "l", lwd=2,
main = "anar knn data prediction")
lines(x.knn, pred_y.knn, col = "blue", lwd=2)
grid()
legend("topright",  legend = c("original", "predicted"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
plot(x.lasso, preds$actuals, col = "red", type = "l", lwd=2,
main = "anar lasso data prediction")
lines(x.lasso, preds$predicteds, col = "blue", lwd=2)
grid()
legend("topright",  legend = c("original", "predicted"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
legend("bottomleft",  legend = c("original", "predicted"),
fill = c("red", "blue"), col = 2:3)
legend("bottomleft",  legend = c("original", "predicted"),
fill = c("red", "blue"))
plot(x, actuals_preds$actuals, col = "red", type = "l", lwd=2,
main = "anar lg data prediction")
lines(x, actuals_preds$predicteds, col = "blue", lwd=2)
grid()
legend("topright",  legend = c("original", "predicted"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
plot(x.knn, test_y.knn, col = "red", type = "l", lwd=2,
main = "anar knn data prediction")
lines(x.knn, pred_y.knn, col = "blue", lwd=2)
grid()
legend("topright",  legend = c("original", "predicted"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
plot(x.lasso, preds$actuals, col = "red", type = "l", lwd=2,
main = "anar lasso data prediction")
lines(x.lasso, preds$predicteds, col = "blue", lwd=2)
grid()
legend("bottomleft",  legend = c("original", "predicted"),
fill = c("red", "blue"))
plot(x, actuals_preds$actuals, col = "red", type = "l", lwd=2,
main = "anar lg data prediction")
lines(x, actuals_preds$predicteds, col = "blue", lwd=2)
grid()
legend("bottomleft",  legend = c("original", "predicted"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
plot(x.knn, test_y.knn, col = "red", type = "l", lwd=2,
main = "anar knn data prediction")
lines(x.knn, pred_y.knn, col = "blue", lwd=2)
grid()
legend("bottomleft",  legend = c("original", "predicted"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
plot(x.lasso, preds$actuals, col = "red", type = "l", lwd=2,
main = "anar lasso data prediction")
lines(x.lasso, preds$predicteds, col = "blue", lwd=2)
grid()
legend("bottomleft",  legend = c("original", "predicted"),
fill = c("red", "blue"), col = 2:3)
x = 1:length(actuals_preds$actuals)
x.lasso = 1:length(preds$actuals)
x.knn = 1:length(test_y.knn)
plot(x, actuals_preds$actuals, col = "red", type = "l", lwd=2,
main = "anar lg data prediction")
lines(x, actuals_preds$predicteds, col = "blue", lwd=2)
grid()
legend("bottomleft",  legend = c("original", "predicted"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
plot(x.knn, test_y.knn, col = "red", type = "l", lwd=2,
main = "anar knn data prediction")
lines(x.knn, pred_y.knn, col = "blue", lwd=2)
grid()
legend("bottomleft",  legend = c("original", "predicted"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
plot(x.lasso, preds$actuals, col = "red", type = "l", lwd=2,
main = "anar lasso data prediction")
lines(x.lasso, preds$predicteds, col = "blue", lwd=2)
grid()
legend("bottomleft",  legend = c("original", "predicted"),
fill = c("red", "blue"), col = 2:3)
