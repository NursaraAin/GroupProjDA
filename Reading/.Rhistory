library(psych)
library(caret)
library(dplyr)
library(car)
library(Metrics)
baca=read.csv("Reading.csv")
dt3=subset(baca,select = c(reg,develop,cat,
Total.Point.estimate,Children.without.functional.difficulties.Point.estimate,
Children.with.functional.difficulties.Point.estimate,Time.period))
str(dt3)
indexes = createDataPartition(dt3$Children.with.functional.difficulties.Point.estimate,
p = .85, list = F)
set.seed(4)
train = dt3[indexes, ]
test = dt3[-indexes, ]
train_x = train[, -6]
train_x = scale(train_x)[,]
train_y = train[,6]
test_x = test[, -6]
test_x = scale(test[,-6])[,]
test_y = test[,6]
knnmodel = knnreg(train_x, train_y)
str(knnmodel)
pred_y = predict(knnmodel, data.frame(test_x))
print(data.frame(test_y, pred_y))
mse = mean((test_y - pred_y)^2)
mae = caret::MAE(test_y, pred_y)
rmse = caret::RMSE(test_y, pred_y)
cat("MSE: ", mse, "MAE: ", mae, " RMSE: ", rmse)
x = 1:length(test_y)
plot(x, test_y, col = "red", type = "l", lwd=2,
main = "KNN completion rate primary data prediction")
lines(x, pred_y, col = "blue", lwd=2)
legend("topright",  legend = c("original", "predicted"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
grid()
cor(data.frame(test_y, pred_y))
#lasso regression
library(glmnet)
baca=read.csv("Reading.csv")
dt3=subset(baca,select = c(reg,develop,cat,
Total.Point.estimate,Children.without.functional.difficulties.Point.estimate,
Children.with.functional.difficulties.Point.estimate,Time.period))
str(dt3)
y <- dt3$Children.without.functional.difficulties.Point.estimate
x <- data.matrix(dt3[, c('reg', 'develop', 'cat','Time.period')])
#perform k-fold cross-validation to find optimal lambda value
cv_model <- cv.glmnet(x, y, alpha = 1)
#find optimal lambda value that minimizes test MSE
best_lambda <- cv_model$lambda.min
best_lambda
plot(cv_model)
#find coefficients of best model
best_model <- glmnet(x, y, alpha = 1, lambda = best_lambda)
coef(best_model)
#use fitted best model to make predictions
y_predicted <- predict(best_model, s = best_lambda, newx = x)
#find SST and SSE
sst <- sum((y - mean(y))^2)
sse <- sum((y_predicted - y)^2)
#find R-Squared
rsq <- 1 - sse/sst
rsq
#0.3958254
hey=as.numeric(y_predicted)
preds <- data.frame(cbind(actuals=dt$Children.with.functional.difficulties.Point.estimate, predicteds=hey))
preds <- data.frame(cbind(actuals=dt3$Children.with.functional.difficulties.Point.estimate, predicteds=hey))
mse = mean((preds$actuals - preds$predicteds)^2)
mae = MAE(preds$actuals, preds$predicteds)
rmse = RMSE(preds$actuals, preds$predicteds)
cat("MSE: ", mse, "MAE: ", mae, " RMSE: ", rmse)
x = 1:length(preds$actuals)
plot(x, preds$actuals, col = "red", type = "l", lwd=2,
main = "anar lg data prediction")
lines(x, preds$predicteds, col = "blue", lwd=2)
legend("topright",  legend = c("original", "predicted"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
grid()
cor(preds)
corPlot(cor(dt3))
set.seed(4)
split1<- sample(c(rep(0, 0.7 * nrow(dt3)), rep(1, 0.3 * nrow(dt3))))
table(split1)
train=dt3[split1==0,]
test=dt3[split1==1,]
model=lm(Children.with.functional.difficulties.Point.estimate~.,data = train)
dtPred=predict(model,test)
actuals_preds <- data.frame(cbind(actuals=test$Children.with.functional.difficulties.Point.estimate, predicteds=dtPred))
mse = mean((actuals_preds$actuals - actuals_preds$predicteds)^2)
mae = MAE(actuals_preds$actuals, actuals_preds$predicteds)
rmse = RMSE(actuals_preds$actuals, actuals_preds$predicteds)
cat("MSE: ", mse, "MAE: ", mae, " RMSE: ", rmse)
x = 1:length(actuals_preds$actuals)
plot(x, actuals_preds$actuals, col = "red", type = "l", lwd=2,
main = "anar lg data prediction")
lines(x, actuals_preds$predicteds, col = "blue", lwd=2)
legend("topright",  legend = c("original", "predicted"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
grid()
cor(actuals_preds)
summary(model)
source("C:/Users/nursa/OneDrive/GroupProjDA/Reading/ReadingLG.R")
comp=read.csv("CompletionRate.csv")
dt2=subset(comp,select = c(reg,develop,cat,
Total.Point.estimate,Children.without.functional.difficulties.Point.estimate,
Children.with.functional.difficulties.Point.estimate,Time.period))
corPlot(cor(dt2))
set.seed(4)
model=lm(Children.with.functional.difficulties.Point.estimate~.,data = dt2)
#require regression for tpe
dt2_tpe=subset(train,select = -c(Children.without.functional.difficulties.Point.estimate,Children.with.functional.difficulties.Point.estimate))
model_tpe=lm(Total.Point.estimate~.,data = dt2_tpe)
#create prediction of comp
hmph=subset(dt2,select = c(Time.period,Children.with.functional.difficulties.Point.estimate))
a=colMeans(hmph[hmph$Time.period=='2017',])
b=colMeans(hmph[hmph$Time.period=='2018',])
c=colMeans(hmph[hmph$Time.period=='2019',])
d=colMeans(hmph[hmph$Time.period=='2020',])
yearPred2=data.frame(
year=c(2017:2020),
compDisabled=c(as.double(a[2]),as.double(b[2]),as.double(c[2]),as.double(d[2]))
)
i=0
j=0
#set how many year to predict
year=5
dt2=subset(comp,select = c(reg,develop,cat,
Total.Point.estimate,Children.without.functional.difficulties.Point.estimate,
Children.with.functional.difficulties.Point.estimate,Time.period))
comp=read.csv("CompletionRate.csv")
dt2=subset(comp,select = c(reg,develop,cat,
Total.Point.estimate,Children.without.functional.difficulties.Point.estimate,
Children.with.functional.difficulties.Point.estimate,Time.period))
corPlot(cor(dt2))
